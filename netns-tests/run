#!/bin/bash

error() {
    echo "$@" >&2
    exit 1
}

prepare() {
    echo "== $testcase/$scenario =="
    cd "$dir"

    ns_server=test-server
    ns_client=test-client

    dev_server=test-server
    dev_client=test-client

    export ipv4_server=192.0.2.1/24
    export ipv6_server=2001:DB8::2:1/64

    export ipv4_client=192.0.2.2/24
    export ipv6_client=2001:DB8::2:2/64
}

check_attempted() {
    local six=""

    [ "$1" == AF_INET6 ] && six=6

    grep -E "^[0-9]+ +connect\([0-9]+, {sa_family=AF_INET${six}, sin${six}_port=htons\([1-9][0-9]*\)," strace.$scenario.client
}

expect_attempted() {
    [ "$NOSTRACE" ] && return 0

    check_attempted "$1" || error "Client was expected to attempt connection using $1 but it didn't."
}

expect_not_attempted() {
    [ "$NOSTRACE" ] && return 0

    check_attempted "$1" && error "Client wasn't expected to attempt connection using $1 but it did."
}

perform() {
    cleanup
    trap "cleanup; echo FAIL" INT QUIT TERM EXIT

    ip netns add $ns_server
    ip netns add $ns_client
    ip link add dev $dev_server type veth peer name $dev_client
    ip link set $dev_server netns $ns_server
    ip link set $dev_client netns $ns_client


    ip -n $ns_server link set $dev_server up
    [ "$ipv4_server" ] && ip -n $ns_server address add $ipv4_server dev $dev_server
    [ "$ipv6_server" ] && ip -n $ns_server address add $ipv6_server dev $dev_server

    ip -n $ns_client link set $dev_client up
    [ "$ipv4_client" ] && ip -n $ns_client address add $ipv4_client dev $dev_client
    [ "$ipv6_client" ] && ip -n $ns_client address add $ipv6_client dev $dev_client

    export NETRESOLVE_BACKENDS="any|loopback|numerichost|hosts"
    export NETRESOLVE_SYSCONFDIR="`pwd`"

    export SOURCE=client.example.net
    export DESTINATION=server.example.net

    cd "testcases/$testcase"

    local strace=

    if [ -x ./server ]; then
        export INTERFACE="$dev_server"

        [ "$NOSTRACE" ] || strace="strace -f -o strace.$scenario.server"
        ip netns exec $ns_server wrapresolve $strace ./server &
        sleep 1
    fi
    if [ -x ./client ]; then
        export INTERFACE="$dev_client"

        [ "$NOSTRACE" ] || strace="strace -f -o strace.$scenario.client"
        time ip netns exec $ns_client wrapresolve $strace ./client || error "Client script failed."
    fi
    if [ -x ./server ]; then
        kill -9 $!
        wait $!
    fi

    case $scenario in
    dualstack-to-dualstack)
        # Prefer IPv6 connection.
        expect_not_attempted AF_INET
        expect_attempted AF_INET6
        ;;
    ipv4-to-dualstack)
        # Prefer IPv4 connection.
        expect_not_attempted AF_INET6
        expect_attempted AF_INET
        ;;
    dualstack-to-lost-ipv6)
        # Prefer IPv6 connection, fallback to IPv4 connection.
        expect_attempted AF_INET6
        expect_attempted AF_INET
        ;;
    esac

    echo "OK"
}

cleanup() {
    ip netns delete $ns_server || true
    ip netns delete $ns_client || true

    trap - INT QUIT TERM EXIT
}

run() {
    testcase="$1"
    scenario="$2"

    prepare

    case $scenario in
    ipv4-to-dualstack)
        unset ipv6_client
        ;;
    dualstack-to-lost-ipv6)
        ip netns exec $ns_server ip6tables -A INPUT -j DROP
        ;;
    esac

    perform
}

run_testcase() {
    run "$1" dualstack-to-dualstack
    run "$1" ipv4-to-dualstack
    run "$1" dualstack-to-lost-ipv6
}

[ "$EUID" == 0 ] || error "The script requires root priviliges. Please run it using 'sudo'."

dir="`pwd`"

if [ $# -eq 0 ]; then
    set -- `ls testcases`
fi

case $# in
0)
    for testcase in `ls testcases`; do
        run_testcase "$1"
    done
    ;;
1)
    run_testcase "$1"
    ;;
2)
    run "$1" "$2"
    ;;
esac

cleanup
